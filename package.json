{
  "name": "@yaegassy/coc-ty",
  "version": "0.1.0",
  "description": "coc.nvim extension with support for the ty type checker and language server.",
  "author": "yaegassy <yosstools@gmail.com>",
  "license": "MIT",
  "main": "lib/index.js",
  "keywords": [
    "coc.nvim",
    "python",
    "python3",
    "ty",
    "type checker",
    "coc-ty",
    "vim",
    "neovim"
  ],
  "engines": {
    "coc": "^0.0.80"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yaegassy/coc-ty"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "lint": "eslint src --ext ts",
    "clean": "rimraf lib",
    "watch": "node esbuild.js --watch",
    "build": "node esbuild.js",
    "prepare": "node esbuild.js"
  },
  "prettier": {
    "singleQuote": true,
    "printWidth": 120,
    "semi": true
  },
  "devDependencies": {
    "@types/node": "^20.11.17",
    "@types/semver": "^7.5.8",
    "@types/which": "^2.0.1",
    "@typescript-eslint/eslint-plugin": "^6.21.0",
    "@typescript-eslint/parser": "^6.21.0",
    "coc.nvim": "^0.0.82",
    "esbuild": "^0.16.17",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.3",
    "prettier": "^3.2.5",
    "rimraf": "^5.0.1",
    "typescript": "^5.3.3",
    "which": "^3.0.0"
  },
  "activationEvents": [
    "onLanguage:python"
  ],
  "contributes": {
    "rootPatterns": [
      {
        "filetype": "python",
        "patterns": [
          "pyproject.toml",
          "ty.toml",
          "setup.py",
          "setup.cfg",
          "tox.ini",
          "Pipfile",
          "requirements.txt"
        ]
      }
    ],
    "configuration": {
      "type": "object",
      "title": "coc-ty configuration",
      "properties": {
        "ty.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable coc-ty extension"
        },
        "ty.disableHover": {
          "type": "boolean",
          "default": false,
          "description": "Disable hover only."
        },
        "ty.disableInlayHint": {
          "type": "boolean",
          "default": false,
          "description": "Disable inlayHint only."
        },
        "ty.disableTypeDefinition": {
          "type": "boolean",
          "default": false,
          "description": "Disable typeDefinition only."
        },
        "ty.useDetectTyCommand": {
          "type": "boolean",
          "default": true,
          "description": "Automatically detects the ty command in the execution environment and sets `ty.path`."
        },
        "ty.binaryPath": {
          "type": "string",
          "default": "",
          "description": "Custom path for the `ty` binary when using the native server. If no value is set, the `ty` command will be detected from the runtime environment."
        },
        "ty.path": {
          "default": [],
          "markdownDescription": "Path to a custom `ty` executable, e.g., `[\"/path/to/ty\"]`.",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ty.experimental.completions.enable": {
          "default": false,
          "markdownDescription": "Whether to enable completions.",
          "scope": "window",
          "type": "boolean"
        },
        "ty.importStrategy": {
          "default": "fromEnvironment",
          "markdownDescription": "Strategy for loading the `ty` executable. `fromEnvironment` picks up ty from the environment, falling back to the bundled version if needed. `useBundled` uses the version bundled with the extension.",
          "enum": [
            "fromEnvironment",
            "useBundled"
          ],
          "enumDescriptions": [
            "Use `ty` from environment, fallback to bundled version only if `ty` not available in the environment.",
            "Always use the bundled version of `ty`."
          ],
          "scope": "window",
          "type": "string"
        },
        "ty.interpreter": {
          "default": [],
          "markdownDescription": "Path to a Python interpreter to use to find the `ty` executable.",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ty.logLevel": {
          "default": null,
          "markdownDescription": "Controls the log level of the language server.",
          "enum": [
            "error",
            "warning",
            "info",
            "debug",
            "trace"
          ],
          "scope": "application",
          "type": "string"
        },
        "ty.logFile": {
          "default": null,
          "markdownDescription": "Path to the log file for the language server.",
          "type": "string"
        },
        "ty.trace.server": {
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between coc.nvim and the ty server."
        }
      }
    },
    "commands": [
      {
        "command": "ty.showLogs",
        "title": "Show logs"
      },
      {
        "command": "ty.restart",
        "title": "Restart Server"
      }
    ]
  },
  "dependencies": {
    "semver": "^7.6.2",
    "toml": "^3.0.0"
  },
  "packageManager": "yarn@1.22.19+sha1.4ba7fc5c6e704fce2066ecbfb0b0d8976fe62447"
}
